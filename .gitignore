# HTTP/1.0, HTTP/1.1, HTTP/2, HTTP/3, 그리고 HTTPS에 대한 개요

## HTTP/1.0
HTTP/1.0은 Hypertext Transfer Protocol의 첫 번째 버전 중 하나로, 웹 브라우저와 웹 서버 간의 통신을 정의하는 프로토콜입니다. 1996년에 공식적으로 발표되었으며, 오늘날의 웹 통신 기초를 형성합니다.

### 주요 특징 및 동작 방식
- **단일 연결, 단일 요청/응답(Single Request-Response per Connection)**:
  HTTP/1.0은 기본적으로 하나의 TCP 연결에서 하나의 요청과 응답을 처리한 후 연결을 닫습니다. 즉, 클라이언트가 웹 서버에 요청을 보내면, 서버는 응답을 보내고 나서 연결을 종료합니다.

### 제한점
- **연결의 비효율성**: 각 요청마다 새로운 연결을 설정하고 해제해야 하므로, 여러 리소스 요청 시 비효율적입니다.
- **지속 연결(Persistent Connection)의 부재**: HTTP/1.0은 지속적인 연결을 유지하는 기능을 기본적으로 제공하지 않습니다.
- **RTT 증가**: 서버로부터 파일을 가져올 때마다 TCP의 3-웨이 핸드셰이크를 계속해서 열어야 하기 때문에 RTT가 증가하는 단점이 있습니다. (RTT: 패킷이 목적지에 도달하고 나서 다시 출발지로 돌아오기까지 걸리는 시간, 패킷 왕복 시간)

## HTTP/1.1
HTTP/1.1은 1997년에 표준화된 버전으로, HTTP/1.0에 비해 여러 가지 중요한 개선사항을 포함하고 있습니다.

### 주요 개선 사항
1. **지속 연결 (Persistent Connections)**:
   HTTP/1.1에서는 기본적으로 연결을 유지(persistent connection)합니다. 여러 요청과 응답이 동일한 TCP 연결을 통해 이루어지므로, 연결을 재설정하는 데 드는 오버헤드가 줄어들고 성능이 향상됩니다.

2. **파이프라이닝 (Pipelining)**:
   HTTP/1.1에서는 클라이언트가 서버로 다수의 요청을 동시에 보내는 것이 가능해졌습니다. 이를 파이프라이닝이라 하며, 첫 번째 요청에 대한 응답을 기다리지 않고 연속적으로 여러 요청을 보낼 수 있습니다.

### 단점
- **HOL Blocking**: 문서 안에 포함된 다수의 리소스(이미지, 동영상, CSS 파일, JS 파일 등)를 처리하려면 요청할 리소스 개수에 비례해서 대기 시간이 길어지는 단점이 있습니다.

## HTTP/2
HTTP/2는 HTTP/1.1의 한계를 극복하고 웹 성능을 개선하기 위해 2015년에 표준화된 차세대 웹 전송 프로토콜입니다. 구글의 SPDY 프로토콜을 바탕으로 개발되었습니다.

### 주요 특징
1. **이진 프로토콜 (Binary Protocol)**:
   HTTP/2는 HTTP/1.1과 달리 텍스트가 아닌 이진 형식(0과 1로 이루어진 데이터)으로 데이터를 전송합니다. 이진 프로토콜은 데이터 파싱을 더 빠르고 효율적으로 수행할 수 있게 해주며, 전송 중 오류 발생 가능성을 줄여줍니다.

2. **멀티플렉싱 (Multiplexing)**:
   HTTP/2는 단일 TCP 연결에서 여러 요청과 응답을 동시에 처리할 수 있는 멀티플렉싱 기능을 지원합니다. 이는 HTTP/1.1의 파이프라이닝을 대체하며, 한 요청이 지연되더라도 다른 요청에 영향을 주지 않고 병렬로 처리할 수 있게 해줍니다.

3. **헤더 압축 (Header Compression)**:
   HTTP/2는 헤더 정보를 효율적으로 압축하기 위해 HPACK(허프만 코딩 알고리즘 사용)이라는 압축 방식을 사용합니다. 이를 통해 전송되는 데이터 양을 줄이고 성능을 향상시킬 수 있습니다.

4. **서버 푸시 (Server Push)**:
   HTTP/2는 서버가 클라이언트가 요청하지 않은 리소스를 미리 클라이언트로 전송할 수 있는 서버 푸시 기능을 제공합니다. 예를 들어, HTML 문서를 요청할 때 서버가 해당 페이지에 필요한 CSS 파일이나 이미지 파일을 미리 전송함으로써 페이지 로딩 시간을 줄일 수 있습니다.

## HTTP/3
HTTP/3는 HTTP/2의 한계를 극복하고 웹 성능을 개선하기 위해 개발된 최신 웹 전송 프로토콜로, 2018년에 표준화되었습니다. QUIC이라는 전송 프로토콜을 기반으로 하며, TCP 대신 UDP를 사용하여 빠르고 안정적인 연결을 제공합니다.

### 주요 특징
1. **QUIC 프로토콜 사용**:
   QUIC은 UDP 기반이지만, TCP와 비슷한 연결 안정성을 제공하며, TCP의 문제점을 해결하는 것을 목표로 합니다.

2. **빠른 연결 설정**:
   QUIC은 TLS(Transport Layer Security) 1.3 암호화를 포함하는 단일 연결 설정 과정을 통해, 기존의 TCP에서 필요한 다중 핸드셰이크 단계를 크게 줄였습니다. 그 결과, 연결 설정 속도가 빨라져 웹 페이지 로딩 시간이 단축됩니다.

3. **헤드 오브 라인 블로킹(Head-of-Line Blocking) 문제 해결**:
   QUIC 프로토콜은 패킷 손실이 발생해도 다른 스트림의 패킷 전송에 영향을 주지 않기 때문에, 전송 효율성이 더 높습니다.

4. **향상된 보안**:
   HTTP/3는 TLS 1.3을 기본으로 사용하여 모든 연결에서 강력한 암호화를 제공합니다. QUIC 자체가 암호화를 기본으로 하기 때문에, QUIC 연결은 항상 암호화된 상태로 이루어집니다.

5. **모바일 및 무선 네트워크에 최적화**:
   HTTP/3는 연결의 지속성을 유지하는 데 뛰어난 성능을 발휘합니다. 예를 들어, 사용자가 모바일 네트워크에서 이동할 때 IP 주소가 변경되더라도, QUIC은 연결을 끊지 않고 계속 유지할 수 있습니다.

## HTTPS
HTTPS는 HTTP Secure의 약자로, 웹에서 데이터를 안전하게 전송하기 위한 HTTP의 확장 버전입니다. HTTPS는 HTTP와 TLS (Transport Layer Security) 또는 SSL (Secure Sockets Layer)을 결합하여 데이터를 암호화하고 보안을 강화합니다.

### HTTPS의 작동 원리
1. **암호화**:
   - **전송 암호화**: HTTPS는 클라이언트와 서버 간의 데이터 전송을 암호화합니다.
   - **SSL/TLS**: HTTPS는 SSL(구버전) 또는 TLS(최신 버전) 프로토콜을 사용하여 암호화를 구현합니다.

2. **인증**:
   - **서버 인증**: HTTPS는 웹 서버의 신뢰성을 검증하는 인증서를 사용합니다.
   - **클라이언트 인증**: 경우에 따라, 클라이언트도 인증서를 사용하여 서버에게 자신의 신원을 증명할 수 있습니다.

3. **HTTPS 연결 과정 (핸드셰이크)**:
   - **서버 인증서 전송**: 클라이언트가 HTTPS 웹사이트에 접속하면, 서버는 SSL/TLS 인증서를 클라이언트에게 전송합니다.
   - **인증서 검증**: 클라이언트는 인증서가 신뢰할 수 있는 인증 기관에서 발급된 것인지 확인합니다.
   - **세션 키 생성**: 클라이언트와 서버는 세션 키를 생성하고, 이 키를 사용해 암호화된 데이터를 주고받습니다.

### SSL과 TLS
- **SSL (Secure Sockets Layer)**:
  SSL은 인터넷에서 데이터를 암호화하여 보안적인 통신을 제공하기 위해 넷스케이프(Netscape)에서 개발한 프로토콜입니다. SSL의 목적은 데이터가 네트워크를 통해 전송되는 동안 기밀성과 무결성을 유지하는 것입니다.

- **TLS (Transport Layer Security)**:
  TLS는 SSL의 후속 프로토콜로, 더 강력한 보안성을 제공하기 위해 개발되었습니다. TLS는 SSL의 기능을 기반으로 하면서 보안과 성능을 개선하였습니다.

### HTTPS 구축 방법
1. **CA에서 인증서 구매 후 서버에 설치**:
   - **장점**: 직접 제어가 가능하고, 원하는 설정을 자유롭게 조정할 수 있습니다.
   - **단점**: 인증서 관리가 복잡하고, 서버 관리자가 HTTPS 설정 및 유지보수를 모두 직접 해야 합니다.

2. **로드밸런서를 사용한 HTTPS 제공**:
   - **장점**: 중앙에서 HTTPS 트래픽을 관리할 수 있어 서버의 부담이 줄어들고, 복잡한 인증서 관리를 로드밸런서에서 처리할 수 있습니다.

